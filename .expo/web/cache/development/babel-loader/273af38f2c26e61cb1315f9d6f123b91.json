{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where } from \"firebase/firestore\";\nimport { app, db } from \"./Config\";\nvar firestoreDB = getFirestore(app);\n\nfunction addUser(userId) {\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(collection(db, \"users\").add({\n            id: userId\n          }));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"Error adding document: \", _context.t0);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\n\nfunction getUsers() {\n  var usersCol, userSnapshot, userList;\n  return _regeneratorRuntime.async(function getUsers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          usersCol = collection(firestoreDB, \"users\");\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(usersCol));\n\n        case 3:\n          userSnapshot = _context2.sent;\n          userList = userSnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          console.log(userList);\n          return _context2.abrupt(\"return\", userList);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function getUserById(id) {\n  var usersRef, q, querySnapshot;\n  return _regeneratorRuntime.async(function getUserById$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          usersRef = collection(firestoreDB, \"users\");\n          q = query(usersRef, where(\"id\", \"==\", id));\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 4:\n          querySnapshot = _context3.sent;\n          return _context3.abrupt(\"return\", querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          }));\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction subscribe(callback) {\n  var unsubscribe = onSnapshot(query(collection(db, \"Chats\")), function (snapshot) {\n    var source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\n    snapshot.docChanges().forEach(function (change) {\n      if (callback) callback({\n        change: change,\n        snapshot: snapshot\n      });\n    });\n  });\n  return unsubscribe;\n}\n\nexport { getUsers, addUser, subscribe };","map":{"version":3,"sources":["C:/Users/mahmo/OneDrive/Desktop/CS303-Project/CS-303 Project/db/User.js"],"names":["addDoc","collection","getDocs","getFirestore","setDoc","doc","query","where","app","db","firestoreDB","addUser","userId","add","id","console","error","getUsers","usersCol","userSnapshot","userList","docs","map","data","log","getUserById","usersRef","q","querySnapshot","subscribe","callback","unsubscribe","onSnapshot","snapshot","source","metadata","hasPendingWrites","docChanges","forEach","change"],"mappings":";;;;;;;AAAA,SAAQA,MAAR,EAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,YAArC,EAAmDC,MAAnD,EAA2DC,GAA3D,EAAgEC,KAAhE,EAAuEC,KAAvE,QAAmF,oBAAnF;AACA,SAAQC,GAAR,EAAYC,EAAZ;AAEA,IAAMC,WAAW,GAAGP,YAAY,CAACK,GAAD,CAAhC;;AAGA,SAAeG,OAAf,CAAuBC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAIcX,UAAU,CAACQ,EAAD,EAAI,OAAJ,CAAV,CAAuBI,GAAvB,CAA2B;AAACC,YAAAA,EAAE,EAACF;AAAJ,WAA3B,CAJd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMQG,UAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd;;AANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,QADV,GACqBjB,UAAU,CAACS,WAAD,EAAc,OAAd,CAD/B;AAAA;AAAA,2CAE+BR,OAAO,CAACgB,QAAD,CAFtC;;AAAA;AAEUC,UAAAA,YAFV;AAGUC,UAAAA,QAHV,GAGsBD,YAAY,CAACE,IAAb,CAAkBC,GAAlB,CAAsB,UAACjB,GAAD,EAAS;AAC7C;AAAQS,cAAAA,EAAE,EAAET,GAAG,CAACS;AAAhB,eAAuBT,GAAG,CAACkB,IAAJ,EAAvB;AACH,WAFiB,CAHtB;AAMIR,UAAAA,OAAO,CAACS,GAAR,CAAYJ,QAAZ;AANJ,4CAOWA,QAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,OAAO,SAAeK,WAAf,CAA2BX,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGY,UAAAA,QADH,GACczB,UAAU,CAACS,WAAD,EAAc,OAAd,CADxB;AAEGiB,UAAAA,CAFH,GAEOrB,KAAK,CAACoB,QAAD,EAAWnB,KAAK,CAAC,IAAD,EAAO,IAAP,EAAaO,EAAb,CAAhB,CAFZ;AAAA;AAAA,2CAGyBZ,OAAO,CAACyB,CAAD,CAHhC;;AAAA;AAGGC,UAAAA,aAHH;AAAA,4CAIIA,aAAa,CAACP,IAAd,CAAmBC,GAAnB,CAAuB,UAACjB,GAAD,EAAS;AACnC;AAAQS,cAAAA,EAAE,EAAET,GAAG,CAACS;AAAhB,eAAuBT,GAAG,CAACkB,IAAJ,EAAvB;AACH,WAFM,CAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASP,SAASM,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,MAAMC,WAAW,GAAGC,UAAU,CAC1B1B,KAAK,CAACL,UAAU,CAACQ,EAAD,EAAK,OAAL,CAAX,CADqB,EAE1B,UAACwB,QAAD,EAAc;AACV,QAAMC,MAAM,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,gBAAlB,GAAqC,OAArC,GAA+C,QAA9D;AACAH,IAAAA,QAAQ,CAACI,UAAT,GAAsBC,OAAtB,CAA8B,UAACC,MAAD,EAAY;AACtC,UAAIT,QAAJ,EAAcA,QAAQ,CAAC;AAAES,QAAAA,MAAM,EAANA,MAAF;AAAUN,QAAAA,QAAQ,EAARA;AAAV,OAAD,CAAR;AACjB,KAFD;AAGH,GAPyB,CAA9B;AASA,SAAOF,WAAP;AACH;;AAED,SAAQd,QAAR,EAAkBN,OAAlB,EAA0BkB,SAA1B","sourcesContent":["import {addDoc, collection, getDocs, getFirestore, setDoc, doc, query, where} from \"firebase/firestore\";\r\nimport {app,db} from \"./Config\";\r\n\r\nconst firestoreDB = getFirestore(app);\r\n\r\n//mine\r\nasync function addUser(userId){\r\n    try {\r\n        // const docRef = await addDoc(collection(db,\"users\"),{id:userId})\r\n        // console.log(\"Document added with ID: \", docRef.id);\r\n        await collection(db,\"users\").add({id:userId})\r\n    } catch (e){\r\n        console.error(\"Error adding document: \", e);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n//doctor abdelghany's\r\nasync function addUser(user) {\r\n    const docRef = await setDoc(collection(firestoreDB, \"users\",user.id), { id: user.id });\r\n}\r\n\r\n */\r\n\r\nasync function getUsers() {\r\n    const usersCol = collection(firestoreDB, \"users\");\r\n    const userSnapshot = await getDocs(usersCol);\r\n    const userList =  userSnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n    console.log(userList);\r\n    return userList;\r\n}\r\n\r\nexport async function getUserById(id) {\r\n    const usersRef = collection(firestoreDB, \"users\");\r\n    const q = query(usersRef, where(\"id\", \"==\", id));\r\n    const querySnapshot = await getDocs(q);\r\n    return querySnapshot.docs.map((doc) => {\r\n        return {id: doc.id, ...doc.data()};\r\n    });\r\n}\r\n\r\nfunction subscribe(callback) {\r\n    const unsubscribe = onSnapshot(\r\n        query(collection(db, \"Chats\")),\r\n        (snapshot) => {\r\n            const source = snapshot.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n            snapshot.docChanges().forEach((change) => {\r\n                if (callback) callback({ change, snapshot });\r\n            });\r\n        }\r\n    );\r\n    return unsubscribe;\r\n}\r\n\r\nexport {getUsers, addUser,subscribe};"]},"metadata":{},"sourceType":"module"}